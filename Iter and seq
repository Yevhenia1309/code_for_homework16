#Домашнє завдання:
#1. Доповніть клас Група (завдання Лекції 2) можливістю підтримки ітераційного протоколу та протоколу послідовності.

class LimitGroupError(Exception):
    """Створюємо клас для помилки, якщо група повністю набрана"""
    def __init__(self, max_limit):
        self.max_limit = max_limit

    def __str__(self):
        return f'We have already full group - {self.max_limit} students.'

class AmountStudentError(Exception):
    """Створюємо клас для помилки, якщо такого студента вже додано до групи"""
    def __init__(self, student, group_title):
        self.student = student
        self.group_title = group_title

    def __str__(self):
        return f'{self.student} is already registered in the {self.group_title}.'

class Person:
    """Створюємо клас Людина: им'я, по-батькові, прізвище, вік"""

    def __init__(self, name: str, second_name: str, surname: str, age: int):
        self.name = name
        self.second_name = second_name
        self.surname = surname
        self.age = age

    def print_name(self):
        """Функція виведення ПІБ особи"""
        return f'{self.name} {self.second_name} {self.surname}'

    def print_age(self):
        """Функція виведення віку особи"""
        return f'Age: {self.age} years old'

    def __str__(self):
        """Функція виведення загального опису особи"""
        return f'{self.name} {self.second_name} {self.surname}, age: {self.age} years old'

class Student(Person):
    """На базі класу Людина створюємо клас Студент: додаємо назву університету і факультету"""
    def __init__(self, name, second_name, surname, age, university: str, faculty: str):
        super().__init__(name, second_name, surname, age)
        self.university = university
        self.faculty = faculty

    def print_university(self):
        """Функція виведення університету, де навчається студент"""
        return f'University: {self.university}'

    def print_faculty(self):
        """Функція виведення факультету, де навчається студент"""
        return f'Faculty: {self.faculty}'

    def __str__(self):
        """Функція виведення загального опису студента"""
        return "Student: " + super().__str__() + ',' + " university is {}, faculty is {}".format(self.university,\
                                                                                                 self.faculty)
class GroupIterator:
    """Створюємо ітераційний протокол"""

    def __init__(self, lst):
        self.lst = lst
        self.index = 0

    def __next__(self):
        if self.index < len(self.lst):
            self.index += 1
            return self.lst[self.index - 1]
        raise StopIteration

    def __iter__(self):
        return self

class Group:
    """Створюємо клас група студентів,
    встановлюємо максимальний розмір групи"""

    def __init__(self, title: str, max_students: int = 10):
        self.title = title
        self.list_students = []
        self.max_students = max_students

    def add_student(self, student: Student):
        """Функція додавання студентів з перевіркою чи є вже такий студент у групі і чи є ще місце в групі"""
        if student in self.list_students:
            raise AmountStudentError(student, self.title)
        if len(self.list_students) >= self.max_students:
            raise LimitGroupError(self.max_students)

        self.list_students.append(student)

    def delete_student(self, student: Student):
        """Функція видалення студента з групи"""
        if student in self.list_students:
            self.list_students.remove(student)

    def find_student(self, surname: str):
        """Функція пошуку студента за прізвищем і додавання у список"""
        res = []
        for student in self.list_students:
            if student.surname == surname:
                res.append(student)
        return res

    def __getitem__(self, index):
        """Створюємо протокол послідовності"""

        """можливість пошуку за індексом"""
        if isinstance(index, int):
            if index >= 0 and index < len (self.list_students):
                return self.list_students[index]
            else:
                raise IndexError

        """можливість пошуку за зрізом"""
        if isinstance(index, slice):
            res_student = []
            start = index.start or 0
            stop = index.stop or len(self.list_students) + 1
            step = index.step or 1

            if start < 0 and stop > len(self.list_students):
                raise IndexError
            for i in range(start, stop, step):
                res_student.append(self.list_students[i])
            return res_student
        raise TypeError()

    def __len__(self):
        return self.list_students

    def __str__(self):
        """Функція виведення групи студентів"""
        return f"{self.title}\n{'^' * 13}\n" + '\n'.join(map(str, self.list_students)) + '\n'

    def __iter__(self):
        return GroupIterator(self.list_students)

student_1 = Student('Alexander', "Yurievich", 'Tvix', 18, 'UNI', "law")
student_2 = Student('Iryna', 'Victorivna', 'Mazur', 19, 'UNI', 'economic')
student_3 = Student('Vlad', 'Olegovich', 'Nofer', 26, 'UNI', 'veterinary')
student_4 = Student('Olha', 'Yurievna', 'Bryk', 23, 'UNI', 'mechanic')
student_5 = Student('Dmitriy', "Vasilievich", 'Acunin', 18, 'UNI', 'law')
student_6 = Student('Maryna', 'Victorivna', 'Tvix', 19, 'UNI', 'economic')
student_7 = Student('Anna', 'Olexandrivna', 'Mon', 20, 'UNI', 'veterinary')
student_8 = Student('Kira', 'Viktorivna', 'Longer', 18, 'UNI', 'mechanic')
student_9 = Student('Kira', 'Viktorivna', 'Longer', 18, 'UNI', 'mechanic')
student_10 = Student('Kateryna', 'Ivanivna', 'Lotr', 19, 'UNI', 'economic')
student_11 = Student('Valeriy', 'Dmitrievich', 'Lif', 28, 'UNI', 'law')

group_english = Group('English group')
group_english.add_student(student_1)
group_english.add_student(student_2)
group_english.add_student(student_3)
group_english.add_student(student_4)
group_english.add_student(student_5)
group_english.add_student(student_6)
group_english.add_student(student_7)
group_english.add_student(student_8)
group_english.add_student(student_9)
group_english.add_student(student_10)


print(group_english[2])

print("--------------")

slice_group = group_english[3:6]

for student in slice_group:
    print(student)

print("--------------")

for student in group_english:
    print(student)


#2. Модифікуєте клас Замовлення (завдання Лекції 1), додавши реалізацію ітераційного протоколу.

class LimitPriceError(Exception):
    """Створюємо клас для помилки, якщо встановили від`ємну або нульову вартість товару"""

    def __init__(self, price):
        self.price = price

    def __str__(self):
        if self.price < 0:
            return 'The product`s price cannot be negative.'
        elif self.price == 0:
            return 'The product`s price cannot be zero.'

class Goods:
    """Створюємо клас Товари, визначаємо назву товару, ціну та вагу"""
    def __init__(self, name: str, price: int, weight: int):
        self.name = name
        self.price = price
        self.weight = weight

        if price <= 0:
            raise LimitPriceError(price)

    def __str__(self):
        """Функція повертає назву, ціну та вагу Товару"""
        return f'Goods: {self.name}, price: {self.price} UAH, weight: {self.weight} g'

class Buyer:
    """Створюємо клас Покупець і визначаємо ім'я, прізвище та номер телефону Покупця"""
    def __init__(self, name: str, surname: str, telephon: int):
        self.name = name
        self.surname = surname
        self.telephon = telephon

    def __str__(self):
        """Функція повертає ім'я, прізвище та телефон Покупця"""
        return f'Buyer: {self.name}, {self.surname}, telephon: {self.telephon}'

buyer_1 = Buyer('Alexander', 'Tvix', 380675676545)
buyer_2 = Buyer('Iryna', 'Mazur', 678764534)
buyer_3 = Buyer('Blad', 'Nofer', 654356782)

class OrderIterator:

    def __init__(self, lst):
        self.lst = lst
        self.index = 0

    def __next__(self):
        if self.index < len(self.lst):
            self.index += 1
            return self.lst[self.index - 1]
        raise StopIteration

    def __iter__(self):
        return self

class Order:
    """Створюємо клас Замовлення, визначаємо найменування, список замовлень та загальну вартість"""
    def __init__(self, title: str):
        self.title = title
        self.order = []
        self.total_amount = []

    def add_order(self, good):
        if good not in self.order:
            self.order.append(good)
            self.total_amount.append(good.price)

    def __str__(self):
        return f"{self.title}\n{'^' * 10}\n" + '\n'.join(map(str, self.order)) + '\n' + \
               'Total: ' + f'{sum(map(int, self.total_amount))}' + ' UAH' + '\n'

    def __iter__(self):
        return OrderIterator(self.order)

order_1 = Order('Buyer_1_Order')
goods_1 = Goods('bread', 25, 300)
goods_2 = Goods('milk', 45, 500)
goods_3 = Goods('banana', 60, 1000)
order_1.add_order(goods_1)
order_1.add_order(goods_2)
order_1.add_order(goods_3)

for good in order_1:
    print(good)
